//
// Autogenerated by Natalie - Storyboard Generator
// by Marcin Krzyzanowski http://krzyzanowskim.com
//
import UIKit

// MARK: - Storyboards

extension UIStoryboard {
    func instantiateViewController<T: UIViewController>(ofType type: T.Type) -> T? where T: IdentifiableProtocol {
        let instance = type.init()
        if let identifier = instance.storyboardIdentifier {
            return self.instantiateViewController(withIdentifier: identifier) as? T
        }
        return nil
    }

}

protocol Storyboard {
    static var storyboard: UIStoryboard { get }
    static var identifier: String { get }
}

struct Storyboards {

    struct LaunchScreen: Storyboard {

        static let identifier = "LaunchScreen"

        static var storyboard: UIStoryboard {
            return UIStoryboard(name: self.identifier, bundle: nil)
        }

        static func instantiateInitialViewController() -> UIViewController {
            return self.storyboard.instantiateInitialViewController()!
        }

        static func instantiateViewController(withIdentifier identifier: String) -> UIViewController {
            return self.storyboard.instantiateViewController(withIdentifier: identifier)
        }

        static func instantiateViewController<T: UIViewController>(ofType type: T.Type) -> T? where T: IdentifiableProtocol {
            return self.storyboard.instantiateViewController(ofType: type)
        }
    }

    struct Main: Storyboard {

        static let identifier = "Main"

        static var storyboard: UIStoryboard {
            return UIStoryboard(name: self.identifier, bundle: nil)
        }

        static func instantiateViewController(withIdentifier identifier: String) -> UIViewController {
            return self.storyboard.instantiateViewController(withIdentifier: identifier)
        }

        static func instantiateViewController<T: UIViewController>(ofType type: T.Type) -> T? where T: IdentifiableProtocol {
            return self.storyboard.instantiateViewController(ofType: type)
        }

        static func instantiateQueriesVC() -> QueriesVC {
            return self.storyboard.instantiateViewController(withIdentifier: "QueriesVC") as! QueriesVC
        }

        static func instantiateRepositoriesVC() -> RepositoriesVC {
            return self.storyboard.instantiateViewController(withIdentifier: "RepositoriesVC") as! RepositoriesVC
        }

        static func instantiateSearchRepositoriesVC() -> SearchRepositoriesVC {
            return self.storyboard.instantiateViewController(withIdentifier: "SearchRepositoriesVC") as! SearchRepositoriesVC
        }

        static func instantiateWebVC() -> WebVC {
            return self.storyboard.instantiateViewController(withIdentifier: "WebVC") as! WebVC
        }

        static func instantiateAddQueryVC() -> AddQueryVC {
            return self.storyboard.instantiateViewController(withIdentifier: "AddQueryVC") as! AddQueryVC
        }

        static func instantiateAddRepositoryVC() -> AddRepositoryVC {
            return self.storyboard.instantiateViewController(withIdentifier: "AddRepositoryVC") as! AddRepositoryVC
        }
    }
}

// MARK: - ReusableKind
enum ReusableKind: String, CustomStringConvertible {
    case tableViewCell = "tableViewCell"
    case collectionViewCell = "collectionViewCell"

    var description: String { return self.rawValue }
}

// MARK: - SegueKind
enum SegueKind: String, CustomStringConvertible {
    case relationship = "relationship"
    case show = "show"
    case presentation = "presentation"
    case embed = "embed"
    case unwind = "unwind"
    case push = "push"
    case modal = "modal"
    case popover = "popover"
    case replace = "replace"
    case custom = "custom"

    var description: String { return self.rawValue }
}

// MARK: - IdentifiableProtocol

public protocol IdentifiableProtocol: Equatable {
    var storyboardIdentifier: String? { get }
}

// MARK: - SegueProtocol

public protocol SegueProtocol {
    var identifier: String? { get }
}

public func ==<T: SegueProtocol, U: SegueProtocol>(lhs: T, rhs: U) -> Bool {
    return lhs.identifier == rhs.identifier
}

public func ~=<T: SegueProtocol, U: SegueProtocol>(lhs: T, rhs: U) -> Bool {
    return lhs.identifier == rhs.identifier
}

public func ==<T: SegueProtocol>(lhs: T, rhs: String) -> Bool {
    return lhs.identifier == rhs
}

public func ~=<T: SegueProtocol>(lhs: T, rhs: String) -> Bool {
    return lhs.identifier == rhs
}

public func ==<T: SegueProtocol>(lhs: String, rhs: T) -> Bool {
    return lhs == rhs.identifier
}

public func ~=<T: SegueProtocol>(lhs: String, rhs: T) -> Bool {
    return lhs == rhs.identifier
}

// MARK: - ReusableViewProtocol
public protocol ReusableViewProtocol: IdentifiableProtocol {
    var viewType: UIView.Type? { get }
}

public func ==<T: ReusableViewProtocol, U: ReusableViewProtocol>(lhs: T, rhs: U) -> Bool {
    return lhs.storyboardIdentifier == rhs.storyboardIdentifier
}

// MARK: - Protocol Implementation
extension UIStoryboardSegue: SegueProtocol {
}

extension UICollectionReusableView: ReusableViewProtocol {
    public var viewType: UIView.Type? { return type(of: self) }
    public var storyboardIdentifier: String? { return self.reuseIdentifier }
}

extension UITableViewCell: ReusableViewProtocol {
    public var viewType: UIView.Type? { return type(of: self) }
    public var storyboardIdentifier: String? { return self.reuseIdentifier }
}

// MARK: - UIViewController extension
extension UIViewController {
    func perform<T: SegueProtocol>(segue: T, sender: Any?) {
        if let identifier = segue.identifier {
            performSegue(withIdentifier: identifier, sender: sender)
        }
    }

    func perform<T: SegueProtocol>(segue: T) {
        perform(segue: segue, sender: nil)
    }
}
// MARK: - UICollectionView

extension UICollectionView {

    func dequeue<T: ReusableViewProtocol>(reusable: T, for: IndexPath) -> UICollectionViewCell? {
        if let identifier = reusable.storyboardIdentifier {
            return dequeueReusableCell(withReuseIdentifier: identifier, for: `for`)
        }
        return nil
    }

    func register<T: ReusableViewProtocol>(reusable: T) {
        if let type = reusable.viewType, let identifier = reusable.storyboardIdentifier {
            register(type, forCellWithReuseIdentifier: identifier)
        }
    }

    func dequeueReusableSupplementaryViewOfKind<T: ReusableViewProtocol>(elementKind: String, withReusable reusable: T, for: IndexPath) -> UICollectionReusableView? {
        if let identifier = reusable.storyboardIdentifier {
            return dequeueReusableSupplementaryView(ofKind: elementKind, withReuseIdentifier: identifier, for: `for`)
        }
        return nil
    }

    func register<T: ReusableViewProtocol>(reusable: T, forSupplementaryViewOfKind elementKind: String) {
        if let type = reusable.viewType, let identifier = reusable.storyboardIdentifier {
            register(type, forSupplementaryViewOfKind: elementKind, withReuseIdentifier: identifier)
        }
    }
}
// MARK: - UITableView

extension UITableView {

    func dequeue<T: ReusableViewProtocol>(reusable: T, for: IndexPath) -> UITableViewCell? {
        if let identifier = reusable.storyboardIdentifier {
            return dequeueReusableCell(withIdentifier: identifier, for: `for`)
        }
        return nil
    }

    func register<T: ReusableViewProtocol>(reusable: T) {
        if let type = reusable.viewType, let identifier = reusable.storyboardIdentifier {
            register(type, forCellReuseIdentifier: identifier)
        }
    }

    func dequeueReusableHeaderFooter<T: ReusableViewProtocol>(_ reusable: T) -> UITableViewHeaderFooterView? {
        if let identifier = reusable.storyboardIdentifier {
            return dequeueReusableHeaderFooterView(withIdentifier: identifier)
        }
        return nil
    }

    func registerReusableHeaderFooter<T: ReusableViewProtocol>(_ reusable: T) {
        if let type = reusable.viewType, let identifier = reusable.storyboardIdentifier {
             register(type, forHeaderFooterViewReuseIdentifier: identifier)
        }
    }
}

// MARK: - QueriesVC
protocol QueriesVCIdentifiableProtocol: IdentifiableProtocol { }

extension QueriesVC: QueriesVCIdentifiableProtocol { }

extension IdentifiableProtocol where Self: QueriesVC {
    var storyboardIdentifier: String? { return "QueriesVC" }
    static var storyboardIdentifier: String? { return "QueriesVC" }
}
extension QueriesVC {

    enum Reusable: String, CustomStringConvertible, ReusableViewProtocol {
        case QueryCell_ = "QueryCell"

        var kind: ReusableKind? {
            switch self {
            case .QueryCell_:
                return ReusableKind(rawValue: "tableViewCell")
            }
        }

        var viewType: UIView.Type? {
            switch self {
            case .QueryCell_:
                return QueryCell.self
            }
        }

        var storyboardIdentifier: String? { return self.description }
        var description: String { return self.rawValue }
    }

}

// MARK: - RepositoriesVC
protocol RepositoriesVCIdentifiableProtocol: IdentifiableProtocol { }

extension RepositoriesVC: RepositoriesVCIdentifiableProtocol { }

extension IdentifiableProtocol where Self: RepositoriesVC {
    var storyboardIdentifier: String? { return "RepositoriesVC" }
    static var storyboardIdentifier: String? { return "RepositoriesVC" }
}
extension RepositoriesVC {

    enum Reusable: String, CustomStringConvertible, ReusableViewProtocol {
        case RepositoryCell_ = "RepositoryCell"

        var kind: ReusableKind? {
            switch self {
            case .RepositoryCell_:
                return ReusableKind(rawValue: "tableViewCell")
            }
        }

        var viewType: UIView.Type? {
            switch self {
            case .RepositoryCell_:
                return RepositoryCell.self
            }
        }

        var storyboardIdentifier: String? { return self.description }
        var description: String { return self.rawValue }
    }

}

// MARK: - SearchRepositoriesVC
protocol SearchRepositoriesVCIdentifiableProtocol: IdentifiableProtocol { }

extension SearchRepositoriesVC: SearchRepositoriesVCIdentifiableProtocol { }

extension IdentifiableProtocol where Self: SearchRepositoriesVC {
    var storyboardIdentifier: String? { return "SearchRepositoriesVC" }
    static var storyboardIdentifier: String? { return "SearchRepositoriesVC" }
}
extension SearchRepositoriesVC {

    enum Reusable: String, CustomStringConvertible, ReusableViewProtocol {
        case SearchRepositoryCell_ = "SearchRepositoryCell"

        var kind: ReusableKind? {
            switch self {
            case .SearchRepositoryCell_:
                return ReusableKind(rawValue: "tableViewCell")
            }
        }

        var viewType: UIView.Type? {
            switch self {
            case .SearchRepositoryCell_:
                return SearchRepositoryCell.self
            }
        }

        var storyboardIdentifier: String? { return self.description }
        var description: String { return self.rawValue }
    }

}

// MARK: - WebVC
protocol WebVCIdentifiableProtocol: IdentifiableProtocol { }

extension WebVC: WebVCIdentifiableProtocol { }

extension IdentifiableProtocol where Self: WebVC {
    var storyboardIdentifier: String? { return "WebVC" }
    static var storyboardIdentifier: String? { return "WebVC" }
}

// MARK: - AddQueryVC
protocol AddQueryVCIdentifiableProtocol: IdentifiableProtocol { }

extension AddQueryVC: AddQueryVCIdentifiableProtocol { }

extension IdentifiableProtocol where Self: AddQueryVC {
    var storyboardIdentifier: String? { return "AddQueryVC" }
    static var storyboardIdentifier: String? { return "AddQueryVC" }
}

// MARK: - AddRepositoryVC
protocol AddRepositoryVCIdentifiableProtocol: IdentifiableProtocol { }

extension AddRepositoryVC: AddRepositoryVCIdentifiableProtocol { }

extension IdentifiableProtocol where Self: AddRepositoryVC {
    var storyboardIdentifier: String? { return "AddRepositoryVC" }
    static var storyboardIdentifier: String? { return "AddRepositoryVC" }
}

